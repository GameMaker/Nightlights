#include <FastLED-3.1.3\FastLED.h>

#define NUM_LEDS 50
#define DATA_PIN 3

#define DELAY_TIME 25

CRGB leds[NUM_LEDS];

void setup()
{

	/* add setup code here */
	FastLED.addLeds<WS2811, DATA_PIN>(leds, NUM_LEDS);
}

int lastLED;
int i, j;

void loop()
{
	lastLED = 0;
	/* add main program code here */
	for (i = 0; i < NUM_LEDS; i++) {
		//leds[lastLED] = CRGB::Black;
		leds[i] = CRGB::Black;
		lastLED = i;
		FastLED.show();
		delay(DELAY_TIME);
	}
	for (i = 0; i < NUM_LEDS; i++) {
		//leds[lastLED] = CRGB::Black;
		leds[i] = CRGB::Red;
		lastLED = i;
		FastLED.show();
		delay(DELAY_TIME);
	}
	for (i = 0; i < NUM_LEDS; i++) {
		//leds[lastLED] = CRGB::Black;
		leds[i] = CRGB::Green;
		lastLED = i;
		FastLED.show();
		delay(DELAY_TIME);
	}
	for (i = 0; i < NUM_LEDS; i++) {
		//leds[lastLED] = CRGB::Black;
		leds[i] = CRGB::Blue;
		lastLED = i;
		FastLED.show();
		delay(DELAY_TIME);
	}
	for (i = 0; i < NUM_LEDS; i++) {
		//leds[lastLED] = CRGB::Black;
		leds[i] = CRGB::White;
		lastLED = i;
		FastLED.show();
		delay(DELAY_TIME);
	}
	for (j = 0; j < 6; j++) {
		for (i = 0; i < NUM_LEDS; i++) {
			if (i % 2) {
				leds[i] = CRGB::Yellow;
			}
			else {
				leds[i] = CRGB::Violet;
			}
			FastLED.show();
		}
		delay(DELAY_TIME);
		for (i = 0; i < NUM_LEDS; i++) {
			if (!(i % 2)) {
				leds[i] = CRGB::Yellow;
			}
			else {
				leds[i] = CRGB::Violet;
			}
			FastLED.show();
		}
		delay(DELAY_TIME);
	}
	for (j = 0; j < 5; j++)
	{
		for (i = 0; i < NUM_LEDS; i++) {
			leds[lastLED] = CRGB::Black;
			leds[i] = CRGB::Red;
			lastLED = i;
			FastLED.show();
			delay(DELAY_TIME);
		}
		for (i = NUM_LEDS - 1; i >= 0; i--) {
			leds[lastLED] = CRGB::Black;
			leds[i] = CRGB::Red;
			lastLED = i;
			FastLED.show();
			delay(DELAY_TIME);
		}

	}
}
